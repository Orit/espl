#include <stdio.h>
#include <stdlib.h>

#include <ctype.h>
#include <assert.h>

int main(int argc, char *argv[]){
 /*  int index;
  int counter =0;
      FILE *f1= fopen(argv[1], "rb" ); 
      FILE *f2= fopen(argv[2], "rb" ); 
      	if (!f1)
	{
		fprintf(stderr, "Unable to open file %s", argv[1]);
		return 0;
	}
	     	if (!f2)
	{
		fprintf(stderr, "Unable to open file %s", argv[1]);
		return 0;
	}
    while( (!feof(f1))){
   // char c1[100];
   // char c2[100];
    int c1=fgetc(f1);
    int c2=fgetc(f2);
    counter++;
    if(c1!=c2){
     printf("%d", counter);     
     printf("\n");
    printf("%d", c1);
    printf("\n");
     printf("%d", c2);
    
      break;
    }
    
        //fread(&my_record,sizeof(struct rec),1,f);
	//    printf("%d\n",my_record.x);
    }
*/

  char *buffer1;
  char *buffer2;
  unsigned long fileLen1;
  unsigned long fileLen2;
 // char c[100];
      FILE *f1= fopen(argv[1], "rb" ); 
      FILE *f2= fopen(argv[2], "rb" ); 
      	if (!f1)
	{
		fprintf(stderr, "Unable to open file %s", argv[1]);
		return 0;
	}
	     	if (!f2)
	{
		fprintf(stderr, "Unable to open file %s", argv[1]);
		return 0;
	}      
	fseek(f1, 0, SEEK_END);
	fileLen1=ftell(f1);
	fseek(f1, 0, SEEK_SET);

	//Allocate memory
	buffer1=(char *)malloc(fileLen1+1);
	if (!buffer1)
	{
	  fprintf(stderr, "Memory error!");
                                fclose(f1);
		return 0;
	}

	//Read file contents into buffer
	fread(buffer1, fileLen1, 1, f1);
	fclose(f1);
  
	fseek(f2, 0, SEEK_END);
	fileLen2=ftell(f2);
	fseek(f2, 0, SEEK_SET);

	//Allocate memory
	buffer2=(char *)malloc(fileLen2+1);
	if (!buffer2)
	{
		fprintf(stderr, "Memory error!");
                        fclose(f2);
		return 0;
	}

	//Read file contents into buffer
	fread(buffer2, fileLen1, 1, f2);
	fclose(f2);
  
	int c;
	int counter=0;
      for (c=0;c<fileLen1;c++){
      counter++;
      if (buffer1[c]!=buffer2[c]){
	 printf("%d", counter);
	 printf("\n");
	printf("%d", buffer1[c]);
	 printf("\n");
	 printf("%d", buffer2[c]);
	 printf("\n");
	 
	  printf("stop");
	 break;
      }
  
    
   }
	free(buffer1);
	free(buffer1);
return 0;

}